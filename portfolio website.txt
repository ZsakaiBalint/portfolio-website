bugs: 

BUG 2. -> 
* when clicking an item in PC view and switching to Mobile: stays at the bottom
* when clicking an item in Mobile and switching to PC: the opened item stays +
    right column is empty
SOLUTION: we need an event listener for view change

* if the viewport size reaches mobile: make 2nd column hidden
* close all elements in the 1st column
* open the current active element in the 1st column

* if the viewport size reaches desktop: make 2nd column visible
* close all elements in the 1st column
* fill the 2nd column with the description



Portfolio website

This website hosts my personal projects and my CV in an interactive manner.
It' purpose is to show all the websites I created to my potential employers and to help keeping track of my improvement as a Symfony (backend) developer.

Header: Page names + user icon: login with google/facebook/linkedin (no additional registration required)
Footer: Contacts: email, phone number, linkedin + "This website was made by Bálint Zsákai using the Symfony framework."
	if the user is logged in: contains "subscribe to my newsletter" button

First visit: tracked by cookies + sessions + database
if it's the first visit, help the user to learn navigating the page with lighter circles in a dark background and moving arrows
if it's not the first visit, no tutorial is shown


Pages:
* home page: quick introduction + listing what each page does + contact form with captcha (send me an email) 
	*admin* all C.R.U.D.
    Call To Action: projects button


* about (me) page: longer introduction, personal background *admin* all C.R.U.D. 
* projects page: Source code (gitHub link) - preview (short video) - try it yourself! (download link) 
	*admin* all C.R.U.D.
* blog section: writing about what I learned - text + image + links + videos
	*admin* all C.R.U.D.

* account section: the user can see and modify what type of data the website collects about them
* login page: google or facebook or linkedin options + contains "subscribe to my newsletter" button
* logout page: it's just a modal saying: Thanks for stopping by! See you soon!

User: admin or not
if not admin and not logged in: can view the vlog section + send email with form + can view personal projects
if not admin and logged in: all the above privileges + can subscribe to my newsletter + download my cv
if admin and logged in: all the above privileges + edit all content
------------------------------------------------------------------------------------------------------------------------
1. make all pages with html + css + js


2. create database:

User: This table will contain all necessary user data
	id (int NOT NULL, PRIMARY KEY),
	name(string NOT NULL),
	email(string NOT NULL),
	isAdmin(bool NOT NULL),
	isNewsletterSubscriber(bool NOT NULL)



Post: This table will store the main content of the blog posts.
	id (int NOT NULL, PRIMARY KEY),
	title (string NOT NULL),
    	body (string NOT NULL),
    	author_id (int NOT NULL, FOREIGN KEY user id REFERENCES User->id, ON DELETE CASCADE)

Images: This table will store image details related to blog posts.
Video: This table will store video details related to blog posts.
Link: This table will store link details related to blog posts.
Category: This table will store categories for blog posts.
Tag: This table will store tags for blog posts.
Post_tags: This is a join table to establish a many-to-many relationship between posts and tags.



Portfolio item: This table will contain one of my personal projects
	id (int NOT NULL, PRIMARY KEY),
	gitHub link (string NOT NULL), 
	preview (short video) - 
	download link (string NOT NULL)


















CREATE TABLE posts (
    id SERIAL PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    body TEXT NOT NULL,
    author_id INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE images (
    id SERIAL PRIMARY KEY,
    post_id INT NOT NULL,
    url VARCHAR(255) NOT NULL,
    description VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (post_id) REFERENCES posts(id) ON DELETE CASCADE
);

CREATE TABLE videos (
    id SERIAL PRIMARY KEY,
    post_id INT NOT NULL,
    url VARCHAR(255) NOT NULL,
    description VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (post_id) REFERENCES posts(id) ON DELETE CASCADE
);

CREATE TABLE links (
    id SERIAL PRIMARY KEY,
    post_id INT NOT NULL,
    url VARCHAR(255) NOT NULL,
    description VARCHAR(255),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (post_id) REFERENCES posts(id) ON DELETE CASCADE
);

CREATE TABLE categories (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL UNIQUE
);

CREATE TABLE tags (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL UNIQUE
);

CREATE TABLE post_tags (
    post_id INT NOT NULL,
    tag_id INT NOT NULL,
    PRIMARY KEY (post_id, tag_id),
    FOREIGN KEY (post_id) REFERENCES posts(id) ON DELETE CASCADE,
    FOREIGN KEY (tag_id) REFERENCES tags(id) ON DELETE CASCADE
);









Establish Relationships
	posts table is the central table.
	images, videos, and links tables reference the posts table through a foreign key relationship.
	categories and tags can be associated with multiple posts, and a post can have multiple tags, hence the post_tags join table.
